map, filter, and reduce are array methods in JavaScript that allow you to perform operations on arrays.

filter: Creates a new array with elements that pass a test provided by a function. For example, you can use filter to select all the even numbers from an array of numbers.

reduce: Reduces an array to a single value by repeatedly applying a function to the elements of the array. For example, you can use reduce to find the sum of all the numbers in an array.

In React, these array methods are often used to manipulate data before rendering it to the UI. For example, you can use map to render a list of items in a component, filter to display a subset of data based on a condition, and reduce to calculate values based on the data.
----------------------
.map[]:-
map: Creates a new array by transforming each element of the original array using a function. For example, you can use map to double the values of an array of numbers.
-----------------------
const arr = [5, 1, 3, 2, 6];

//Double - [10, 2, 6, 4, 12]

//Triple - [15, 1, 9, 6, 18]

function Double(x) {
    return x * 2;
}

const output = arr.map(Double);

console.log(output);

output :- 
(5) [10, 2, 6, 4, 12]
0: 10
1: 2
2: 6
3: 4
4: 12
length: 5
[[Prototype]]: Array(0)

---------------------------------------------------
Triple the original array :-
-----------------------------------
const arr = [5, 1, 3, 2, 6];


//Double - [10, 2, 6, 4, 12]

//Triple - [15, 1, 9, 6, 18]

function Triple(x) {
    return x * 3;
}

const output = arr.map(Triple);

console.log(output);
--------------------------------------
output :- 
(5)Â [15, 3, 9, 6, 18]
0: 15
1: 3
2: 9
3: 6
4: 18
*******************************************************
Binary :- 

const arr = [5, 1, 3, 2, 6];


function binary(x) {
    return x.toString(2);
}

const output = arr.map(binary);

console.log(output);
*********************************************************
output:-
['101', '1', '11', '10', '110']

**********************************************************
ANOTHER WAY:-
1.DOUBLE:-
const arr1 = [5, 1, 3, 2, 6];


const output1 = arr1.map(function double(x) {
    return x * 2;
});


OUTPUT :-
[10, 2, 6, 4, 12]

console.log(output1);
2.TRIPLE:-
const arr2 = [5, 1, 3, 2, 6];


const output2 = arr2.map(function triple(x) {
    return x * 3;
});

console.log(output2);


OUTPUT :-
[15, 3, 9, 6, 18]

3.BINARY :- 
const arr = [5, 1, 3, 2, 6];


const output = arr.map(function binary(x) {
    return x.toString(2);
});

console.log(output);

OUTPUT :-
['101', '1', '11', '10', '110']

*******************************************************************************************
We can do with arrow function also :-
1.DOUBLE
const arr1 = [5, 1, 3, 2, 6];
const output1 = arr1.map((x) => x * 2);
console.log(output1);

OUTPUT :- [10, 2, 6, 4, 12]

2.TRIPLE
const arr1 = [5, 1, 3, 2, 6];
const output1 = arr1.map((x) => x * 3);
console.log(output1);


OUTPUT:- [15, 3, 9, 6, 18]

3.BINARY 
const arr1 = [5, 1, 3, 2, 6];
const output1 = arr1.map((x) => x.toString(2));
console.log(output1);

OUTPUT :-
['101', '1', '11', '10', '110']




